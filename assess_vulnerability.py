import geopandas as gpd
import xarray as xr
import pandas as pd
from shapely.geometry import Point
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px

# Step 1: Generate Example Weather Data
# Create example data for extreme weather events
latitudes = np.linspace(-30, 30, 10)
longitudes = np.linspace(-80, -60, 10)
intensity = np.random.rand(len(latitudes), len(longitudes)) * 10  # Random intensity values

# Create a Dataset
weather_ds = xr.Dataset(
    {
        "intensity": (("lat", "lon"), intensity)
    },
    coords={
        "lat": (("lat"), latitudes),
        "lon": (("lon"), longitudes)
    }
)

# Save to NetCDF file
weather_ds.to_netcdf("extreme_weather.nc")

# Step 2: Generate Example Power Infrastructure Data
data = {
    'name': ['Power Plant A', 'Power Plant B'],
    'geometry': [Point(-70.0, -20.0), Point(-70.5, -22.0)]  # Adjusted coordinates to match weather data
}

power_df = gpd.GeoDataFrame(data, crs="EPSG:4326")
power_df.to_file("power_infrastructure.shp")

# Step 3: Load Data
print("Loading power infrastructure data...")
power_gdf = gpd.read_file("power_infrastructure.shp")
print("Power Infrastructure Data:")
print(power_gdf)

print("Loading extreme weather data...")
weather_ds = xr.open_dataset("extreme_weather.nc")
print("Extreme Weather Data:")
print(weather_ds)

# Step 4: Prepare Weather Events as Geospatial Points
lat = weather_ds["lat"].values
lon = weather_ds["lon"].values
intensity = weather_ds["intensity"].values

# Ensure lat and lon arrays align with intensity
if lat.ndim == 1 and lon.ndim == 1:
    lon, lat = np.meshgrid(lon, lat)

# Flatten the arrays
weather_events = pd.DataFrame({
    "lat": lat.ravel(),
    "lon": lon.ravel(),
    "intensity": intensity.ravel()
})

# Create GeoDataFrame for weather events
weather_gdf = gpd.GeoDataFrame(
    weather_events,
    geometry=gpd.points_from_xy(weather_events.lon, weather_events.lat),
    crs="EPSG:4326"
)

# Step 5: Visualize the Datasets
fig, ax = plt.subplots(figsize=(10, 8))

# Plot power infrastructure
power_gdf.plot(ax=ax, color='blue', label='Power Infrastructure', markersize=100)

# Plot weather events
weather_gdf.plot(ax=ax, color='red', label='Weather Events', markersize=10)

# Add legend and title
plt.legend()
plt.title('Power Infrastructure and Weather Events')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid()
plt.show()

# Step 6: Spatial Join to Find Vulnerable Infrastructure
print("Performing spatial join...")
vulnerable_infrastructure = gpd.sjoin(power_gdf, weather_gdf, how='inner', predicate='intersects')

print("Vulnerable Infrastructure after Spatial Join:")
print(vulnerable_infrastructure)

# Check if we found any vulnerable infrastructure
if vulnerable_infrastructure.empty:
    print("No vulnerable infrastructure identified after the spatial join.")
else:
    # Step 7: Function to Calculate Risk Score
    def calculate_risk(row):
        base_risk = 1
        # Assuming the type is available in your data; adjust if needed
        base_risk *= 2  # Example adjustment for power plants
        return base_risk * row['intensity']

    # Calculate risk score for each vulnerable infrastructure
    vulnerable_infrastructure['risk_score'] = vulnerable_infrastructure.apply(calculate_risk, axis=1)

    # Step 8: Visualization using Plotly
    vulnerable_infrastructure['lon'] = vulnerable_infrastructure.geometry.x
    vulnerable_infrastructure['lat'] = vulnerable_infrastructure.geometry.y

    fig = px.scatter_mapbox(
        vulnerable_infrastructure,
        lat="lat",
        lon="lon",
        color="risk_score",
        size="risk_score",  # Make sure you want to size by risk score
        mapbox_style="carto-positron",
        title="Vulnerability of Power Infrastructure to Extreme Weather Events",
        labels={"risk_score": "Risk Score"}
    )

    # Customize layout
    fig.update_layout(
        margin={"r":0, "t":0, "l":0, "b":0},
        coloraxis_colorbar=dict(
            title="Risk Score",
            tickvals=[1, 5, 10],
            ticktext=["Low", "Moderate", "High"]
        )
    )

    # Show the figure
    fig.show()
